{
	// Place your snippets for elixir here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"inspect": {
		"prefix": ".ins",
		"body": "|> IO.inspect(label: \"${0:$TM_FILEPATH:$TM_LINE_NUMBER}\")",
		"description": "Adds a pipeline with a labelled `IO.inspect`"
	},
	"inspect with color": {
		"prefix": ".insc",
		"body": "\n|> IO.inspect(\n\tlabel: \"${0:$TM_FILEPATH:$TM_LINE_NUMBER}\",\n\tsyntax_colors: [number: :yellow, atom: :cyan, string: :green, boolean: :magenta, nil: :magenta]\n)",
		"description": "Adds a pipeline with a labelled `IO.inspect` and colorizes data types"
	},
	"inspect with color limit infinity": {
		"prefix": ".inscli",
		"body": "\n|> IO.inspect(\n\tlabel: \"${0:$TM_FILEPATH:$TM_LINE_NUMBER}\", \n\tsyntax_colors: [number: :yellow, atom: :cyan, string: :green, boolean: :magenta, nil: :magenta], \n\tlimit: :infinity\n)",
		"description": "Adds a pipeline with a labelled `IO.inspect`, colorizes data types, and displays everything"
	},
	  "pipe": {
		"prefix": ".p",
		"body": "\n|> $0",
		"description": "Pipe to new line"
	  },
	  "wait": {
		"prefix": "wait",
		"body": "\nIO.puts(\"hit enter to continue\")\nIO.read(:line)"
	  },
	  "pry": {
		"prefix": "pry",
		"body": "require IEx; IEx.pry()"
	  },
		"process info messages": {
			"prefix": "pinfo",
			"body": "IO.inspect(Process.info(self(), :messages), label: \"${0:$TM_FILEPATH:$TM_LINE_NUMBER}\", syntax_colors: [number: :yellow, atom: :cyan, string: :green, boolean: :magenta, nil: :magenta], limit: :infinity)"
		},
	  "stackstrace": {
		"prefix": "stack",
		"body": "IO.inspect(Process.info(self(), :current_stacktrace), label: \"STACKTRACE\")"
	  },
	  "using macro": {
		"prefix": "using",
		"body": [
		  "\tdefmacro __using__(_opts) do",
			"\t\tquote do",
			  "\t\t\t$0",
			"\t\tend",
		  "\tend"
		]
	  },
}